services:

  db:
    image: postgres:15
    container_name: postgres
    env_file:
      - ./backend/src/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - service_net

  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - service_net

  app1:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: server_app1
    volumes:
      - ./backend:/app
      - ../logs/backend:/app/logs
    expose:
      - "8000"
    env_file:
      - ./backend/src/.env
    environment:
      - PYTHONPATH=/app/src
      - RUN_ENV=docker
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-mydb}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - service_net

  app2:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: server_app2
    volumes:
      - ./backend:/app
      - ../logs/backend:/app/logs
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app/src
      - RUN_ENV=docker
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-mydb}
    env_file:
      - ./backend/src/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - service_net


  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./frontend/dist:/usr/share/nginx/html   # vite build 결과물
      - ./data/nginx/dev:/etc/nginx/conf.d
      - ../logs/nginx:/var/log/nginx  # 로그
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    ports:
      - "80:80"
    depends_on:
      - app1
      - app2
    command: nginx -g "daemon off;"
    networks:
      - service_net
      - monitoring_net


  ## 프로메테우스
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    expose:
      - "9090"
    networks:
      - monitoring_net
      - service_net
    # 외부 포트는 열지 않음

  # 그라파나
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost/monitoring
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    # 외부 접근은 Nginx 리버스프록시 통해서만
    expose:
      - "3000"  # 내부 테스트용으로만 열어둘 수 있음
    networks:
      - monitoring_net

networks:
  service_net:
  monitoring_net:

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: